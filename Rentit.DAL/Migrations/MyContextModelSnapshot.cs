// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rentit.DAL;

#nullable disable

namespace Rentit.DAL.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AttributesPropertyy", b =>
                {
                    b.Property<int>("Attributes_propertyId")
                        .HasColumnType("int");

                    b.Property<int>("PropertiesId")
                        .HasColumnType("int");

                    b.HasKey("Attributes_propertyId", "PropertiesId");

                    b.HasIndex("PropertiesId");

                    b.ToTable("AttributesPropertyy");
                });

            modelBuilder.Entity("AttributesRequestHost", b =>
                {
                    b.Property<int>("Attributes_requestsId")
                        .HasColumnType("int");

                    b.Property<int>("RequesthostsId")
                        .HasColumnType("int");

                    b.HasKey("Attributes_requestsId", "RequesthostsId");

                    b.HasIndex("RequesthostsId");

                    b.ToTable("AttributesRequestHost");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Rentit.DAL.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("ClientiD")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Rentit.DAL.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon_Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Attributes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Icon_Url = "icon1.jpg",
                            Name = "WiFi"
                        },
                        new
                        {
                            Id = 2,
                            Icon_Url = "icon2.jpg",
                            Name = "Washer"
                        },
                        new
                        {
                            Id = 3,
                            Icon_Url = "icon3.jpg",
                            Name = "Extra pillows and blankets"
                        },
                        new
                        {
                            Id = 4,
                            Icon_Url = "icon4.jpg",
                            Name = "Iron"
                        },
                        new
                        {
                            Id = 5,
                            Icon_Url = "icon5.jpg",
                            Name = "TV"
                        },
                        new
                        {
                            Id = 6,
                            Icon_Url = "icon6.jpg",
                            Name = "Air conditioning"
                        },
                        new
                        {
                            Id = 7,
                            Icon_Url = "icon7.jpg",
                            Name = "Heating"
                        },
                        new
                        {
                            Id = 8,
                            Icon_Url = "icon8.jpg",
                            Name = "Carbon monoxide alarm"
                        },
                        new
                        {
                            Id = 9,
                            Icon_Url = "icon9.jpg",
                            Name = "kitchen essentials"
                        },
                        new
                        {
                            Id = 10,
                            Icon_Url = "icon10.jpg",
                            Name = "Outdoor dining area"
                        },
                        new
                        {
                            Id = 11,
                            Icon_Url = "icon11.jpg",
                            Name = "Outdoor dining area"
                        },
                        new
                        {
                            Id = 12,
                            Icon_Url = "icon12.jpg",
                            Name = "BBQ grill"
                        },
                        new
                        {
                            Id = 13,
                            Icon_Url = "icon13.jpg",
                            Name = "Security cameras on property"
                        },
                        new
                        {
                            Id = 14,
                            Icon_Url = "icon14.jpg",
                            Name = "Smoke alarm"
                        },
                        new
                        {
                            Id = 15,
                            Icon_Url = "icon15.jpg",
                            Name = "Free parking on premises"
                        });
                });

            modelBuilder.Entity("Rentit.DAL.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img_URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Start_HostingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.doe@example.com",
                            FName = "John",
                            Img_URL = "user1.jpg",
                            JoinedDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LName = "Doe",
                            RoleId = 1,
                            Start_HostingDate = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane.smith@example.com",
                            FName = "Jane",
                            Img_URL = "user2.jpg",
                            JoinedDate = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LName = "Smith",
                            RoleId = 2,
                            Start_HostingDate = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Email = "alice.johnson@example.com",
                            FName = "Alice",
                            Img_URL = "user3.jpg",
                            JoinedDate = new DateTime(2022, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LName = "Johnson",
                            RoleId = 2,
                            Start_HostingDate = new DateTime(2022, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Email = "bob.brown@example.com",
                            FName = "Bob",
                            Img_URL = "user4.jpg",
                            JoinedDate = new DateTime(2022, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LName = "Brown",
                            RoleId = 2,
                            Start_HostingDate = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Email = "eva.martinez@example.com",
                            FName = "Eva",
                            Img_URL = "user5.jpg",
                            JoinedDate = new DateTime(2022, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LName = "Martinez",
                            RoleId = 2,
                            Start_HostingDate = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Email = "michael.lee@example.com",
                            FName = "Michael",
                            Img_URL = "user6.jpg",
                            JoinedDate = new DateTime(2022, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LName = "Lee",
                            RoleId = 2,
                            Start_HostingDate = new DateTime(2022, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Email = "sarah.garcia@example.com",
                            FName = "Sarah",
                            Img_URL = "user7.jpg",
                            JoinedDate = new DateTime(2023, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LName = "Garcia",
                            RoleId = 2,
                            Start_HostingDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            Email = "david.rodriguez@example.com",
                            FName = "David",
                            Img_URL = "user8.jpg",
                            JoinedDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LName = "Rodriguez",
                            RoleId = 2,
                            Start_HostingDate = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            Email = "emma.wilson@example.com",
                            FName = "Emma",
                            Img_URL = "user9.jpg",
                            JoinedDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LName = "Wilson",
                            RoleId = 2,
                            Start_HostingDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            Email = "james.taylor@example.com",
                            FName = "James",
                            Img_URL = "user10.jpg",
                            JoinedDate = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LName = "Taylor",
                            RoleId = 2,
                            Start_HostingDate = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Rentit.DAL.Favourite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PropertyID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyID");

                    b.HasIndex("UserID");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("Rentit.DAL.Governate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Governs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cairo"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Alexandria"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Giza"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Shubra El-Kheima"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Port Said"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Suez"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Luxor"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Asyut"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Aswan"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Damietta"
                        });
                });

            modelBuilder.Entity("Rentit.DAL.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Img_URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Img_order")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Img_URL = "https://img.freepik.com/free-photo/3d-house-model-with-modern-architecture_23-2151004065.jpg?t=st=1712117397~exp=1712120997~hmac=1a2ad4c7342725d276b70bee4e75dd551f744052cac67a255d150de79fc61745&w=900",
                            Img_order = 1,
                            PropertyId = 1
                        },
                        new
                        {
                            Id = 2,
                            Img_URL = "https://img.freepik.com/free-photo/front-view-front-door-with-white-wall-plants_23-2149360608.jpg?t=st=1712117418~exp=1712121018~hmac=61d37274b4944fec15d6f5ed1eb4f004e4772dd03248df0c058e3e2f651c1f9a&w=740",
                            Img_order = 2,
                            PropertyId = 1
                        },
                        new
                        {
                            Id = 3,
                            Img_URL = "https://img.freepik.com/free-photo/mosque-pictures-moroccan-wall-pattern_1203-5080.jpg?t=st=1712117254~exp=1712120854~hmac=3f3d33979735c2b8d03323cf139d35d7cc2c2919c8eaa1c2b1272923e1a1c142&w=740",
                            Img_order = 2,
                            PropertyId = 2
                        },
                        new
                        {
                            Id = 4,
                            Img_URL = "https://img.freepik.com/free-vector/hand-sketch-art-decor-inspired-large-floral-arrangement_1409-4511.jpg?w=740&t=st=1711924304~exp=1711924904~hmac=198bbde6e9b3da518d3fe0904717c37d2bb559fb797e03b42663c1e061e9722f",
                            Img_order = 1,
                            PropertyId = 2
                        },
                        new
                        {
                            Id = 5,
                            Img_URL = "https://img.freepik.com/free-photo/luxury-pool-villa-spectacular-contemporary-design-digital-art-real-estate-home-house-property-ge_1258-150749.jpg?t=st=1712117445~exp=1712121045~hmac=429a6408e64495a6d543152f5243d1d29d2d7651937d7c7c34802828d94a8a9e&w=900",
                            Img_order = 1,
                            PropertyId = 3
                        },
                        new
                        {
                            Id = 6,
                            Img_URL = "https://img.freepik.com/free-photo/road-city_1417-1426.jpg?t=st=1712117465~exp=1712121065~hmac=303d36a852079b1948e617f509dfce9423bc4ba52da3d484dadb5dacbe7225d4&w=900",
                            Img_order = 2,
                            PropertyId = 3
                        },
                        new
                        {
                            Id = 7,
                            Img_URL = "https://img.freepik.com/free-photo/3d-rendering-house-model_23-2150799723.jpg?t=st=1712117482~exp=1712121082~hmac=8291103bc5178bba4099f63c14a648b345ef908c1a66bd2914378f534b777fca&w=740",
                            Img_order = 1,
                            PropertyId = 4
                        },
                        new
                        {
                            Id = 8,
                            Img_URL = "https://img.freepik.com/free-photo/3d-rendering-house-model_23-2150799687.jpg?t=st=1712117500~exp=1712121100~hmac=7584209dfe4ab0fa004cb16a25bf17619bd9fdc0cfad245928ac6b199fd82cc0&w=740",
                            Img_order = 2,
                            PropertyId = 4
                        },
                        new
                        {
                            Id = 9,
                            Img_URL = "https://img.freepik.com/free-photo/3d-rendering-house-model_23-2150799725.jpg?t=st=1712117522~exp=1712121122~hmac=2d8432ff5656294aff471f60925a6724959e51b3ff96e594afa6827b8916cbc8&w=740",
                            Img_order = 1,
                            PropertyId = 5
                        },
                        new
                        {
                            Id = 10,
                            Img_URL = "https://img.freepik.com/free-photo/abandoned-closed-wooden-church-forest-countryside_181624-798.jpg?t=st=1712117536~exp=1712121136~hmac=f022c3c067bc808c2fa623e2fdb1accb008d7d2c0859d66a3dbe1a347701fe41&w=740",
                            Img_order = 2,
                            PropertyId = 5
                        },
                        new
                        {
                            Id = 11,
                            Img_URL = "https://img.freepik.com/free-photo/3d-rendering-house-model_23-2150799703.jpg?t=st=1712117559~exp=1712121159~hmac=614b9fba699ee26e9ba722f3e905473c349c80fa686151ebd3a11b181b7406a3&w=360",
                            Img_order = 1,
                            PropertyId = 6
                        },
                        new
                        {
                            Id = 12,
                            Img_URL = "https://img.freepik.com/free-photo/vertical-shot-modern-apartments-daytime_181624-13625.jpg?t=st=1712117582~exp=1712121182~hmac=7f04d601a4ffdb3a9fed51e6e517752e4cbc903506b422a15c8146e9cea14d5e&w=740",
                            Img_order = 2,
                            PropertyId = 6
                        },
                        new
                        {
                            Id = 13,
                            Img_URL = "https://img.freepik.com/free-photo/promenade-canal-dubai-marina-with-luxury-skyscrapers-around-united-arab-emirates_231208-7556.jpg?t=st=1712117605~exp=1712121205~hmac=83fec7ef9d2360d0ab2e3354604fadbcf83d9fea4073a0fd81f4429988fe7a85&w=740",
                            Img_order = 3,
                            PropertyId = 7
                        },
                        new
                        {
                            Id = 14,
                            Img_URL = "https://img.freepik.com/free-photo/analog-landscape-city-with-buildings_23-2149661457.jpg?t=st=1712117640~exp=1712121240~hmac=d5bafc7058c817487e4cc8aef8bc218d30547889a3b7253402b253c13c44d04c&w=740",
                            Img_order = 4,
                            PropertyId = 7
                        },
                        new
                        {
                            Id = 15,
                            Img_URL = "https://img.freepik.com/free-photo/3d-house-model-with-modern-architecture_23-2151004054.jpg?t=st=1712117688~exp=1712121288~hmac=0a0c307151447c7303579f8a6442870ec814f6ecd1e6c5638638a58cf823c982&w=900",
                            Img_order = 1,
                            PropertyId = 8
                        },
                        new
                        {
                            Id = 16,
                            Img_URL = "https://img.freepik.com/free-photo/contemporary-house-interior-design_23-2151050939.jpg?t=st=1712117704~exp=1712121304~hmac=e0f42042c3020b895162605ec418bba3b509993be192a4b1062ecad1900a5b1f&w=900",
                            Img_order = 2,
                            PropertyId = 8
                        });
                });

            modelBuilder.Entity("Rentit.DAL.ImgesForRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Img_URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Img_order")
                        .HasColumnType("int");

                    b.Property<int>("Request_HostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Request_HostId");

                    b.ToTable("ImgesForRequests");
                });

            modelBuilder.Entity("Rentit.DAL.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Building_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Building_no")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernateId")
                        .HasColumnType("int");

                    b.Property<string>("Location_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GovernateId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Building_name = "ABC Building",
                            Building_no = 123,
                            City = "Cairo",
                            District_name = "Downtown",
                            GovernateId = 1,
                            Location_url = "https://maps.example.com/123",
                            Street = "Main Street"
                        },
                        new
                        {
                            Id = 2,
                            Building_name = "XYZ Tower",
                            Building_no = 456,
                            City = "Alexandria",
                            District_name = "City Center",
                            GovernateId = 2,
                            Location_url = "https://maps.example.com/456",
                            Street = "First Avenue"
                        },
                        new
                        {
                            Id = 3,
                            Building_name = "Luxor Plaza",
                            Building_no = 789,
                            City = "Luxor",
                            District_name = "Riverfront",
                            GovernateId = 3,
                            Location_url = "https://maps.example.com/789",
                            Street = "Nile Street"
                        },
                        new
                        {
                            Id = 4,
                            Building_name = "Pyramid Tower",
                            Building_no = 101,
                            City = "Giza",
                            District_name = "Tourist Area",
                            GovernateId = 1,
                            Location_url = "https://maps.example.com/101",
                            Street = "Sphinx Avenue"
                        },
                        new
                        {
                            Id = 5,
                            Building_name = "Seafront Apartments",
                            Building_no = 202,
                            City = "Alexandria",
                            District_name = "Coastal Area",
                            GovernateId = 2,
                            Location_url = "https://maps.example.com/202",
                            Street = "Corniche"
                        },
                        new
                        {
                            Id = 6,
                            Building_name = "Nubian Palace",
                            Building_no = 303,
                            City = "Aswan",
                            District_name = "Historic Area",
                            GovernateId = 3,
                            Location_url = "https://maps.example.com/303",
                            Street = "Pharaohs Road"
                        },
                        new
                        {
                            Id = 7,
                            Building_name = "Nile View Towers",
                            Building_no = 404,
                            City = "Cairo",
                            District_name = "Riverside",
                            GovernateId = 1,
                            Location_url = "https://maps.example.com/404",
                            Street = "Nile Corniche"
                        },
                        new
                        {
                            Id = 8,
                            Building_name = "Haram Mall",
                            Building_no = 505,
                            City = "Giza",
                            District_name = "Commercial Area",
                            GovernateId = 1,
                            Location_url = "https://maps.example.com/505",
                            Street = "Al-Haram Street"
                        },
                        new
                        {
                            Id = 9,
                            Building_name = "Marina Towers",
                            Building_no = 606,
                            City = "Alexandria",
                            District_name = "Waterfront",
                            GovernateId = 2,
                            Location_url = "https://maps.example.com/606",
                            Street = "Marina Road"
                        },
                        new
                        {
                            Id = 10,
                            Building_name = "Cleopatra Palace",
                            Building_no = 707,
                            City = "Luxor",
                            District_name = "Ancient Area",
                            GovernateId = 3,
                            Location_url = "https://maps.example.com/707",
                            Street = "Cleopatra Street"
                        });
                });

            modelBuilder.Entity("Rentit.DAL.PlaceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlaceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Room"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Entire Home"
                        });
                });

            modelBuilder.Entity("Rentit.DAL.PropertyStates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyStates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Available"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Under maintainance"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Booked"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Unavailable"
                        });
                });

            modelBuilder.Entity("Rentit.DAL.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Entire House/Apartment"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Private Room"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Shared Room"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Villa"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Condo"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Townhouse"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Cottage/Cabin"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Bungalow"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Chalet"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Farm stay"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Boat/Yacht"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Treehouse"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Yurt"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Tent/Campsite"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Igloo"
                        });
                });

            modelBuilder.Entity("Rentit.DAL.Propertyy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<int>("Loc_id")
                        .HasColumnType("int");

                    b.Property<int>("Nighly_Price")
                        .HasColumnType("int");

                    b.Property<int>("Nums_Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Nums_Bedrooms")
                        .HasColumnType("int");

                    b.Property<int>("Nums_Beds")
                        .HasColumnType("int");

                    b.Property<int>("Nums_Guests")
                        .HasColumnType("int");

                    b.Property<int>("Nums_Web_visitors")
                        .HasColumnType("int");

                    b.Property<int>("PlaceType_ID")
                        .HasColumnType("int");

                    b.Property<string>("Property_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropetyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.HasIndex("Loc_id");

                    b.HasIndex("PlaceType_ID");

                    b.HasIndex("PropetyTypeId");

                    b.HasIndex("StateId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A comfortable apartment located in the heart of the city.",
                            HostId = 3,
                            Loc_id = 1,
                            Nighly_Price = 100,
                            Nums_Bathrooms = 1,
                            Nums_Bedrooms = 1,
                            Nums_Beds = 1,
                            Nums_Guests = 2,
                            Nums_Web_visitors = 0,
                            PlaceType_ID = 1,
                            Property_Name = "Cozy Apartment in Downtown",
                            PropetyTypeId = 1,
                            StateId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "A luxurious villa with a private pool and stunning views.",
                            HostId = 2,
                            Loc_id = 2,
                            Nighly_Price = 300,
                            Nums_Bathrooms = 2,
                            Nums_Bedrooms = 3,
                            Nums_Beds = 3,
                            Nums_Guests = 6,
                            Nums_Web_visitors = 0,
                            PlaceType_ID = 2,
                            Property_Name = "Spacious Villa with Pool",
                            PropetyTypeId = 2,
                            StateId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "A charming cottage located right on the beach, perfect for a romantic getaway.",
                            HostId = 3,
                            Loc_id = 3,
                            Nighly_Price = 150,
                            Nums_Bathrooms = 1,
                            Nums_Bedrooms = 1,
                            Nums_Beds = 2,
                            Nums_Guests = 4,
                            Nums_Web_visitors = 0,
                            PlaceType_ID = 2,
                            Property_Name = "Beachfront Cottage",
                            PropetyTypeId = 3,
                            StateId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "A cozy cabin nestled in the forest, perfect for nature lovers.",
                            HostId = 4,
                            Loc_id = 4,
                            Nighly_Price = 120,
                            Nums_Bathrooms = 1,
                            Nums_Bedrooms = 1,
                            Nums_Beds = 2,
                            Nums_Guests = 3,
                            Nums_Web_visitors = 0,
                            PlaceType_ID = 2,
                            Property_Name = "Rustic Cabin in the Woods",
                            PropetyTypeId = 4,
                            StateId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "A charming chalet with stunning mountain views and a relaxing hot tub.",
                            HostId = 5,
                            Loc_id = 5,
                            Nighly_Price = 250,
                            Nums_Bathrooms = 2,
                            Nums_Bedrooms = 3,
                            Nums_Beds = 4,
                            Nums_Guests = 8,
                            Nums_Web_visitors = 0,
                            PlaceType_ID = 2,
                            Property_Name = "Mountain Chalet with Hot Tub",
                            PropetyTypeId = 5,
                            StateId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "An elegant townhouse located in the historic district, within walking distance to major attractions.",
                            HostId = 5,
                            Loc_id = 6,
                            Nighly_Price = 200,
                            Nums_Bathrooms = 2,
                            Nums_Bedrooms = 2,
                            Nums_Beds = 2,
                            Nums_Guests = 4,
                            Nums_Web_visitors = 0,
                            PlaceType_ID = 2,
                            Property_Name = "Historic Townhouse in City Center",
                            PropetyTypeId = 6,
                            StateId = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "A luxurious penthouse offering breathtaking views of the city skyline.",
                            HostId = 7,
                            Loc_id = 7,
                            Nighly_Price = 500,
                            Nums_Bathrooms = 1,
                            Nums_Bedrooms = 1,
                            Nums_Beds = 1,
                            Nums_Guests = 2,
                            Nums_Web_visitors = 0,
                            PlaceType_ID = 2,
                            Property_Name = "Luxury Penthouse with Panoramic Views",
                            PropetyTypeId = 7,
                            StateId = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "A beautiful beach house with a private pool, perfect for a relaxing getaway.",
                            HostId = 8,
                            Loc_id = 8,
                            Nighly_Price = 350,
                            Nums_Bathrooms = 2,
                            Nums_Bedrooms = 3,
                            Nums_Beds = 3,
                            Nums_Guests = 6,
                            Nums_Web_visitors = 0,
                            PlaceType_ID = 2,
                            Property_Name = "Sunny Beach House with Pool",
                            PropetyTypeId = 8,
                            StateId = 1
                        },
                        new
                        {
                            Id = 9,
                            Description = "A cozy cabin by the river with a private fishing dock, perfect for outdoor enthusiasts.",
                            HostId = 9,
                            Loc_id = 9,
                            Nighly_Price = 180,
                            Nums_Bathrooms = 1,
                            Nums_Bedrooms = 1,
                            Nums_Beds = 2,
                            Nums_Guests = 4,
                            Nums_Web_visitors = 0,
                            PlaceType_ID = 2,
                            Property_Name = "Riverside Cabin with Fishing Dock",
                            PropetyTypeId = 9,
                            StateId = 1
                        },
                        new
                        {
                            Id = 10,
                            Description = "A unique eco-friendly treehouse retreat surrounded by nature, perfect for a peaceful escape.",
                            HostId = 10,
                            Loc_id = 10,
                            Nighly_Price = 200,
                            Nums_Bathrooms = 1,
                            Nums_Bedrooms = 1,
                            Nums_Beds = 1,
                            Nums_Guests = 2,
                            Nums_Web_visitors = 0,
                            PlaceType_ID = 2,
                            Property_Name = "Eco-Friendly Treehouse Retreat",
                            PropetyTypeId = 10,
                            StateId = 1
                        });
                });

            modelBuilder.Entity("Rentit.DAL.RequestHost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Building_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Building_no")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernateId")
                        .HasColumnType("int");

                    b.Property<string>("Location_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nighly_Price")
                        .HasColumnType("int");

                    b.Property<int>("Nums_Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Nums_Bedrooms")
                        .HasColumnType("int");

                    b.Property<int>("Nums_Beds")
                        .HasColumnType("int");

                    b.Property<int>("Nums_Guests")
                        .HasColumnType("int");

                    b.Property<int>("PlaceType_ID")
                        .HasColumnType("int");

                    b.Property<string>("Property_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropetyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Request_StateID")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GovernateId");

                    b.HasIndex("PlaceType_ID");

                    b.HasIndex("PropetyTypeId");

                    b.HasIndex("Request_StateID");

                    b.HasIndex("UserID");

                    b.ToTable("RequestHosts");
                });

            modelBuilder.Entity("Rentit.DAL.RequestRent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Checkin_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Checkout_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("HostID")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Nightly_price")
                        .HasColumnType("float");

                    b.Property<int>("NumOfGuests")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("Request_StateID_Admin")
                        .HasColumnType("int");

                    b.Property<int>("Request_StateID_Host")
                        .HasColumnType("int");

                    b.Property<double>("ServiceFee")
                        .HasColumnType("float");

                    b.Property<int>("StayDurationInDays")
                        .HasColumnType("int");

                    b.Property<double>("Total_price")
                        .HasColumnType("float");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<double>("WebsiteFee")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("HostID");

                    b.HasIndex("PropertyId");

                    b.HasIndex("Request_StateID_Admin");

                    b.HasIndex("Request_StateID_Host");

                    b.HasIndex("UserID");

                    b.ToTable("RequestRents");
                });

            modelBuilder.Entity("Rentit.DAL.RequestState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequestStates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Accepted"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Refused"
                        });
                });

            modelBuilder.Entity("Rentit.DAL.UserReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PropertyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Review_date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Userid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyID");

                    b.HasIndex("Userid");

                    b.ToTable("UserReviews");
                });

            modelBuilder.Entity("Rentit.DAL.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("AttributesPropertyy", b =>
                {
                    b.HasOne("Rentit.DAL.Attributes", null)
                        .WithMany()
                        .HasForeignKey("Attributes_propertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rentit.DAL.Propertyy", null)
                        .WithMany()
                        .HasForeignKey("PropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttributesRequestHost", b =>
                {
                    b.HasOne("Rentit.DAL.Attributes", null)
                        .WithMany()
                        .HasForeignKey("Attributes_requestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rentit.DAL.RequestHost", null)
                        .WithMany()
                        .HasForeignKey("RequesthostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Rentit.DAL.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Rentit.DAL.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rentit.DAL.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Rentit.DAL.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rentit.DAL.Client", b =>
                {
                    b.HasOne("Rentit.DAL.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Rentit.DAL.Favourite", b =>
                {
                    b.HasOne("Rentit.DAL.Propertyy", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyID");

                    b.HasOne("Rentit.DAL.Client", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserID");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Rentit.DAL.Image", b =>
                {
                    b.HasOne("Rentit.DAL.Propertyy", "Property")
                        .WithMany("Property_imgs")
                        .HasForeignKey("PropertyId");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Rentit.DAL.ImgesForRequest", b =>
                {
                    b.HasOne("Rentit.DAL.RequestHost", "Request_host")
                        .WithMany("Imgs")
                        .HasForeignKey("Request_HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request_host");
                });

            modelBuilder.Entity("Rentit.DAL.Location", b =>
                {
                    b.HasOne("Rentit.DAL.Governate", "Governate")
                        .WithMany("Locations")
                        .HasForeignKey("GovernateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governate");
                });

            modelBuilder.Entity("Rentit.DAL.Propertyy", b =>
                {
                    b.HasOne("Rentit.DAL.Client", "User")
                        .WithMany("Properties")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rentit.DAL.Location", "Location")
                        .WithMany()
                        .HasForeignKey("Loc_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rentit.DAL.PlaceType", "Place_Type")
                        .WithMany()
                        .HasForeignKey("PlaceType_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rentit.DAL.PropertyType", "Property_Type")
                        .WithMany()
                        .HasForeignKey("PropetyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rentit.DAL.PropertyStates", "Property_States")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Place_Type");

                    b.Navigation("Property_States");

                    b.Navigation("Property_Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Rentit.DAL.RequestHost", b =>
                {
                    b.HasOne("Rentit.DAL.Governate", "governate")
                        .WithMany()
                        .HasForeignKey("GovernateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rentit.DAL.PlaceType", "Place_Type")
                        .WithMany()
                        .HasForeignKey("PlaceType_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rentit.DAL.PropertyType", "Property_Type")
                        .WithMany()
                        .HasForeignKey("PropetyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rentit.DAL.RequestState", "Request_state")
                        .WithMany()
                        .HasForeignKey("Request_StateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rentit.DAL.Client", "User")
                        .WithMany("RequestHosts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place_Type");

                    b.Navigation("Property_Type");

                    b.Navigation("Request_state");

                    b.Navigation("User");

                    b.Navigation("governate");
                });

            modelBuilder.Entity("Rentit.DAL.RequestRent", b =>
                {
                    b.HasOne("Rentit.DAL.Client", "Host")
                        .WithMany()
                        .HasForeignKey("HostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rentit.DAL.Propertyy", "Property")
                        .WithMany("RequestRents")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rentit.DAL.RequestState", "Request_state_Admin")
                        .WithMany()
                        .HasForeignKey("Request_StateID_Admin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rentit.DAL.RequestState", "Request_state_Host")
                        .WithMany()
                        .HasForeignKey("Request_StateID_Host")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Rentit.DAL.Client", "User")
                        .WithMany("RequestRents")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("Property");

                    b.Navigation("Request_state_Admin");

                    b.Navigation("Request_state_Host");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Rentit.DAL.UserReview", b =>
                {
                    b.HasOne("Rentit.DAL.Propertyy", "Property")
                        .WithMany("UserReviews")
                        .HasForeignKey("PropertyID");

                    b.HasOne("Rentit.DAL.Client", "User")
                        .WithMany()
                        .HasForeignKey("Userid");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Rentit.DAL.Client", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Properties");

                    b.Navigation("RequestHosts");

                    b.Navigation("RequestRents");
                });

            modelBuilder.Entity("Rentit.DAL.Governate", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Rentit.DAL.Propertyy", b =>
                {
                    b.Navigation("Property_imgs");

                    b.Navigation("RequestRents");

                    b.Navigation("UserReviews");
                });

            modelBuilder.Entity("Rentit.DAL.RequestHost", b =>
                {
                    b.Navigation("Imgs");
                });
#pragma warning restore 612, 618
        }
    }
}
